unit TestInputSignalsController;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, InputSignalsController, DIOCardInput, Signal, System.Classes,
  Vcl.ExtCtrls;

type
  // Test methods for class TInputSignalsController

  TestTInputSignalsController = class(TTestCase)
  strict private
    FInputSignalsController: TInputSignalsController;
  public
    procedure SetUp; override;
    procedure TearDown; override;

  published
    procedure TestSetSignalsMustSendBitsFromInputToSignalsArray;
    procedure TestConstructorMustReadStateOfSignals;
  end;

implementation
uses
  Delphi.Mocks, System.Generics.Collections;

procedure TestTInputSignalsController.SetUp;
var DIOCardMock: TMock<IDIOCardInput>;
begin
  DIOCardMock:=TMock<IDIOCardInput>.Create;
  DIOCardMock.Setup.WillReturn(0).When.GetWord;
  FInputSignalsController:=TInputSignalsController.Create(DIOCardMock);
end;

procedure TestTInputSignalsController.TearDown;
begin
  FInputSignalsController.Free;
  FInputSignalsController := nil;
end;

procedure TestTInputSignalsController.TestConstructorMustReadStateOfSignals;
var
  DIOCard: TMock<IDIOCardInput>;
begin
  DIOCard:=TMock<IDIOCardInput>.Create;
  DIOCard.Setup.WillReturn(0).When.GetWord;
  DIOCard.Setup.Expect.Once.When.GetWord;
  TInputSignalsController.Create(DIOCard);
end;

procedure TestTInputSignalsController.TestSetSignalsMustSendBitsFromInputToSignalsArray;
var
  inputWord: Word;
  signal1,signal2: TMock<TSignal>;
begin
  signal1:=TMock<TSignal>.Create();
  signal2:=TMock<TSignal>.Create();
  FInputSignalsController.Signals.Add(signal1);
  FInputSignalsController.Signals.Add(signal2);
  inputWord:=2; //binary 0000 0000 0000 0010
  signal1.Setup.Expect.Once.When.SetState(it0.IsEqualTo<boolean>(false));
  signal2.Setup.Expect.Once.When.SetState(it0.IsEqualTo<boolean>(true));

  FInputSignalsController.SetSignals(inputWord);

  signal1.VerifyAll();
  signal2.VerifyAll();
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTInputSignalsController.Suite);
end.

